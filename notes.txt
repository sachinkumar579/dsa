Algorithm -series of steps to solve a problem 

Data Structures 

Efficiency also called complexity is about how well we use Computer resources to get any job done

Thinking about efficiency in terms of Space and Time complexity 

Time complexity - how long does code take to run 
Space complexity - how much storage space it needs 

O(n) Big O notation - describing efficiencty of code 

(n) -> an algebraic expression - a mathematical function of variable n 

n - length of input to the function 

Consider a Pseudocode 

line 20 function print(input) :  - take a string input and iterate through it  
line 21     create  output string ;  
line 22     for each letter in string 
line 23         get new letter from letters location in cipher 
line 24         add new letter to output 
line 25     return output 


line 21 and line 25 each happen only once, every time the function is run . Big O notation can be written as O (    2) . Add 2 for effeciency
The 2 lines line 23 24 run for every letter in the string. So Big O notation can be written as O(2n+2) where n-> Number of letters 

Example : 
if n=10
0(10) = 22 
To get actual efficiency - Multiply this with the time computer takes to run 1 line of code 


Addressing complications

for the loop it has to compute each time to get the next letter in the string. so we can write O(n) as O(3n+2)

Its impossible to predict how many computations this pseudocode is going to take 

There will be 26 checks in line 23 . So rewrite Big O notation as (29n+2)

Why should we learn DSA - Its good to think about efficiency before writing code. For complex operations and tasks dealing with large data sets its really important to 
write effecient code . 


Finding Big O notation 
1. You should reduce any numbers that you multiply by to 1, and anything you add by to 0.



def example1(manatees):
    for manatee in manatees:
        print manatee['name']

def example2(manatees):
    print manatees[0]['name']
    print manatees[0]['age']

def example3(manatees):
    for manatee in manatees:
        for manatee_property in manatee:
            print manatee_property, ": ", manatee[manatee_property]

def example4(manatees):
    oldest_manatee = "No manatees here!"
    for manatee1 in manatees:
        for manatee2 in manatees:
            if manatee1['age'] < manatee2['age']:
                oldest_manatee = manatee2['name']
            else:
                oldest_manatee = manatee1['name']
    print oldest_manatee

Here are the answers and explanations:

Example 1
We iterate over every manatee in the manatees list with the for loop. Since we're given that manatees has n elements, our code will take approximately O(n) time to run.

Example 2
We look at two specific properties of a specific manatee. We aren't iterating over anything - just doing constant-time lookups on lists and dictionaries. Thus the code will complete in constant, or O(1), time.

Example 3
There are two for loops, and nested for loops are a good sign that you need to multiply two runtimes. Here, for every manatee, we check every property. If we had 4 manatees, each with 5 properties, then we would need 5+5+5+5 steps. This logic simplifies to the number of manatees times the number of properties, or O(nm).

Example 4
Again we have nested for loops. This time we're iterating over the manatees list twice - every time we see a manatee, we compare it to every other manatee's age. We end up with O(nn), or O(n^2) (which is read as "n squared").


------------------------------------------------------------------------------------------------------------------------------------------------

Collections - group of things 

Collections need not have same type of object

or may not be linearly placed 

There are many Data Structures that are an extension of Collections. We cannot directly use Collections in a programming language 



Big-O Cheat Sheet - https://www.bigocheatsheet.com/

Reference - https://classroom.udacity.com/courses/ud513/

------------------------------------------------------------------------------------------------------------------------------------------------

Time complexity of Search and Sort algorithms 
Bubble Sort , Selection Sort  - O(n ^2)
Merge Sort - O(n logn)
Linear Search - O(n)
Binary Search - O(logn) 
